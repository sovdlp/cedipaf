{"version":3,"sources":["../../src/composables/stack.ts"],"names":["useToggleScope","computed","onScopeDispose","reactive","readonly","ref","toRaw","watchEffect","getCurrentInstance","stack","useStack","isActive","zIndex","vm","_zIndex","value","lastZIndex","length","push","idx","findIndex","v","splice","isTop","_isTop","setTimeout","stackStyles"],"mappings":"SAASA,c;AAET,SAASC,QAAT,EAAmBC,cAAnB,EAAmCC,QAAnC,EAA6CC,QAA7C,EAAuDC,GAAvD,EAA4DC,KAA5D,EAAmEC,WAAnE,QAAsF,KAAtF;SACSC,kB,6BAET;;AAGA,MAAMC,KAAK,GAAGN,QAAQ,CAAoD,EAApD,CAAtB;AAEA,OAAO,SAASO,QAAT,CAAmBC,QAAnB,EAAqDC,MAArD,EAA6F;AAClG,QAAMC,EAAE,GAAGL,kBAAkB,CAAC,UAAD,CAA7B;;AAEA,QAAMM,OAAO,GAAGT,GAAG,CAAC,CAACO,MAAM,CAACG,KAAT,CAAnB;;AACAf,EAAAA,cAAc,CAACW,QAAD,EAAW,MAAM;AAAA;;AAC7B,UAAMK,UAAU,aAAGP,KAAK,CAACA,KAAK,CAACQ,MAAN,GAAe,CAAhB,CAAR,qBAAG,OAA0B,CAA1B,CAAnB;AACAH,IAAAA,OAAO,CAACC,KAAR,GAAgBC,UAAU,GAAGA,UAAU,GAAG,EAAhB,GAAqB,CAACJ,MAAM,CAACG,KAAvD;AACAN,IAAAA,KAAK,CAACS,IAAN,CAAW,CAACL,EAAD,EAAKC,OAAO,CAACC,KAAb,CAAX;AAEAb,IAAAA,cAAc,CAAC,MAAM;AACnB,YAAMiB,GAAG,GAAGV,KAAK,CAACW,SAAN,CAAgBC,CAAC,IAAIA,CAAC,CAAC,CAAD,CAAD,KAASR,EAA9B,CAAZ;AACAJ,MAAAA,KAAK,CAACa,MAAN,CAAaH,GAAb,EAAkB,CAAlB;AACD,KAHa,CAAd;AAID,GATa,CAAd;AAWA,QAAMI,KAAK,GAAGlB,GAAG,CAAC,IAAD,CAAjB;AACAE,EAAAA,WAAW,CAAC,MAAM;AAAA;;AAChB,UAAMiB,MAAM,GAAGlB,KAAK,YAACG,KAAK,CAACA,KAAK,CAACQ,MAAN,GAAe,CAAhB,CAAN,qBAAC,QAA0B,CAA1B,CAAD,CAAL,KAAwCJ,EAAvD;;AACAY,IAAAA,UAAU,CAAC,MAAMF,KAAK,CAACR,KAAN,GAAcS,MAArB,CAAV;AACD,GAHU,CAAX;AAKA,SAAO;AACLD,IAAAA,KAAK,EAAEnB,QAAQ,CAACmB,KAAD,CADV;AAELG,IAAAA,WAAW,EAAEzB,QAAQ,CAAC,OAAO;AAAEW,MAAAA,MAAM,EAAEE,OAAO,CAACC;AAAlB,KAAP,CAAD;AAFhB,GAAP;AAID","sourcesContent":["import { useToggleScope } from '@/composables/toggleScope'\n\nimport { computed, onScopeDispose, reactive, readonly, ref, toRaw, watchEffect } from 'vue'\nimport { getCurrentInstance } from '@/util'\n\n// Types\nimport type { ComponentInternalInstance, Ref } from 'vue'\n\nconst stack = reactive<[vm: ComponentInternalInstance, zIndex: number][]>([])\n\nexport function useStack (isActive: Readonly<Ref<boolean>>, zIndex: Readonly<Ref<string | number>>) {\n  const vm = getCurrentInstance('useStack')\n\n  const _zIndex = ref(+zIndex.value)\n  useToggleScope(isActive, () => {\n    const lastZIndex = stack[stack.length - 1]?.[1]\n    _zIndex.value = lastZIndex ? lastZIndex + 10 : +zIndex.value\n    stack.push([vm, _zIndex.value])\n\n    onScopeDispose(() => {\n      const idx = stack.findIndex(v => v[0] === vm)\n      stack.splice(idx, 1)\n    })\n  })\n\n  const isTop = ref(true)\n  watchEffect(() => {\n    const _isTop = toRaw(stack[stack.length - 1]?.[0]) === vm\n    setTimeout(() => isTop.value = _isTop)\n  })\n\n  return {\n    isTop: readonly(isTop),\n    stackStyles: computed(() => ({ zIndex: _zIndex.value })),\n  }\n}\n"],"file":"stack.mjs"}